// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package config_data generated by go-bindata.// sources:
// config/config.default.yaml
// config/config.prod.yaml
package config_data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigDefaultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x53\x5d\x53\xdb\x46\x14\x7d\xd7\xaf\xb8\x33\x7e\x69\x67\x1a\x2c\x43\xf8\xa8\xde\x5a\x12\x3a\xc9\x84\x26\xd3\xc2\xf4\xb1\xb3\x96\x16\xac\x89\xac\x75\x76\xd7\x75\xe9\x93\xec\xf2\xd9\x00\x4e\x86\x0f\x13\xc3\xd0\x4c\x07\x08\xcd\x04\xd9\x24\x69\x30\xb6\x09\x3f\xc6\xda\x95\xfc\x94\xbf\xd0\x59\x39\x06\xf2\xb2\xd2\xee\x3d\x77\xef\x3d\x67\xcf\x1d\x27\xee\x8c\x3d\x9b\xa7\x88\xdb\xc4\x35\x34\x80\x3b\x36\x43\x69\x07\x3f\x42\x3c\x33\x4e\x28\xc5\x66\x1c\x80\x19\xe4\x30\x0c\x09\x88\xce\x6a\xe2\xe3\x7c\x77\x69\x4d\x6e\xd7\x85\x5f\x0d\xce\x57\xbe\xea\xb6\x76\x22\xff\x40\x2c\xbc\xeb\x56\x4e\xbe\x96\xb5\x4d\x71\x54\x12\x17\x1b\x91\x7f\xd9\xad\xf8\xc9\x3c\xc3\x34\x69\xbb\x33\x04\xd4\x59\xed\xb0\x97\x1f\x34\xd6\xc4\xc9\x8e\xd8\x3b\x0e\xab\xf3\xb2\xf2\x41\x78\x2f\xa2\xa5\xd7\xe2\xaf\xe3\x1b\x49\xa2\x76\x2e\x9a\x9b\x61\x75\x3e\x83\x5c\xcb\xc1\x54\x03\xb8\xeb\xf6\x3b\xbb\xcb\x4c\x94\xc3\x37\xba\xba\x78\x13\x9c\xaf\xf4\xee\xd6\x00\x26\x6c\x8a\x27\x31\xcf\x10\xeb\x47\xc2\xbf\x73\x1c\x52\xc0\x96\x01\x9c\xe6\x15\x56\xd5\x5e\x28\x46\x7e\xa3\x47\x42\xae\x2e\x89\x67\xcf\xe5\xf6\xb9\x7c\xb7\x75\x4d\xff\x7b\x62\xcd\x8d\x13\x97\xe5\xb3\x39\xc5\xff\xa1\x3b\xed\x66\x11\x65\x19\xe4\x5c\xdd\x23\x8e\x4a\x72\x7f\x4f\x9e\x1c\x88\x93\x8a\xf4\xff\x8b\xfc\x8f\xe1\x85\x1f\x34\x9a\x2a\xfc\xa9\xbd\x2a\x96\x5f\x88\xfa\xa2\x58\xde\x15\xad\x66\xd0\xf0\x82\xc6\x6b\xb9\x5d\x0f\xdb\x1b\x62\xf1\xad\x58\x6d\x06\xad\xc3\xa0\xb5\x1e\xd5\xce\xe4\x69\x29\x68\xb4\x02\xa5\x4d\x4b\x94\xb7\x3b\x5e\x49\x03\x98\xb2\xb3\x78\x82\xd0\x2c\xe2\x06\x4c\x12\xf7\x1b\xd0\x53\x70\x1f\xb9\x30\xa8\xeb\x23\x90\x1a\x36\xf4\xdb\x86\x3e\x0c\x3f\x4c\x4e\x29\xea\x71\x5d\x59\xf9\xd0\xad\xbc\x97\x2f\xdb\xa2\x5d\xd6\x00\xc6\x33\x88\x32\xcc\x0d\x98\x9e\x9a\xb8\x35\xd6\x43\x09\xaf\x1d\x1e\x3f\x15\xcd\xb2\x38\xa9\x84\x6f\x8e\xba\xbb\x8b\x8a\x2e\x4e\xe7\x67\x1f\xe0\xdf\xb0\x63\x80\xa5\xfe\x21\xd1\xfb\x76\xbc\xa2\x7a\xb5\x8e\x57\x2c\x20\xea\x76\xbc\x22\xa6\x94\xd0\x8e\x57\x9c\x41\x1c\x39\x1d\xaf\x68\xf5\x84\xea\x78\xa5\x70\xf3\x6f\xb9\xfc\x2c\x5c\xaf\x89\x7f\xfe\x14\xad\x66\xe4\xfb\x57\x5a\xa8\x5c\xa5\x45\xb9\x16\xb4\x0e\xc5\x52\x59\xd4\x9f\x2b\xf9\x2f\x17\xa2\xa3\x62\xfc\xf4\x87\xe2\xb2\xa2\x01\x24\x40\xee\xbe\x17\x07\xd5\xee\xc2\x5a\x78\xe1\x47\xb5\x33\x51\x2e\x75\x77\x16\x3e\xb5\xab\x19\xce\x73\xcc\x48\x26\x19\xcf\x5b\x73\x36\xb5\xd9\x80\x49\xb2\x49\x8b\x98\x49\xb5\xb9\x43\xcc\xe4\x17\x0e\x1e\xc8\xf0\xac\xa3\x69\x09\x60\xd8\xa4\x98\xc3\x63\x3c\xc7\x34\xb5\x18\xc0\x38\x76\x4d\xdb\xb9\x35\x4b\x7e\xd5\xb4\x84\xf2\x5b\x6c\xdf\x5e\x49\x8d\x14\x62\xf7\xe7\x08\xe5\x06\x0c\xe9\xba\xae\x01\xdc\xff\x65\x4a\xbd\x04\xc9\x73\x03\x46\x07\xe3\xa3\x02\x4e\x33\x62\x3e\xc6\xfc\x11\x21\x8e\x01\xa9\xf8\xd0\x22\x59\x64\xbb\x4c\xe5\x03\xdc\x02\xd5\xb2\x91\x4c\x3a\xc4\x44\x4e\x86\x30\x6e\x8c\xe9\x63\x0a\x66\xcf\xba\x84\xe2\xe9\x9f\x1e\x5c\x21\x93\xb9\x7c\xda\xb1\xcd\xfe\x8e\xd9\xb3\xee\x3d\xb7\xbf\xe3\xc4\x22\x0c\x12\x50\x60\x9a\x46\xb1\x65\xc7\x59\xc8\xb2\xa8\x01\xa9\xc1\xd1\x01\x7d\x40\x1f\x48\x19\x23\x43\xa3\xdf\xaa\xb6\x11\x63\x05\x42\x2d\x05\xb1\xd2\x06\xa4\x62\x2a\xc4\xf9\xd9\xfe\x03\xf7\xbb\xa4\xf8\x49\xde\xa6\x6a\x10\xe2\xa9\x51\x22\xc9\xad\xba\x5c\xf3\x45\x73\x23\x3c\x6d\x89\xfd\xa7\x9a\x65\x23\x07\x9b\xdc\x80\xec\x1c\x7b\xe2\x68\xf1\xaa\xae\x8c\x59\x5c\x57\xbd\xd6\x69\x48\x1f\xd1\x00\xd4\xb8\x1a\x40\x09\xe1\x37\x5b\x81\xd4\xe0\xd0\xed\x61\x15\xb7\x10\x47\x69\xc4\xb0\x01\x1c\x33\x85\x31\xfb\xf6\xcc\xf3\x99\x31\x0d\x20\x8b\x7e\x7f\x98\xc3\xee\x38\x71\x5d\x66\xc0\x98\xae\x2b\x43\xec\x79\xe2\xe0\x95\x5c\xd9\x10\x6d\x2f\xba\xdc\x97\xeb\x87\x72\xab\xde\xc3\xde\xb3\x1c\xfc\x19\x9b\x8a\xb1\x9f\xe3\xa7\x2f\xc3\xea\x7c\xf8\x6f\xb3\x5b\x79\x2b\xb7\xea\xe2\xe0\x95\xa8\x97\xbf\x20\xae\x46\xf3\xff\x00\x00\x00\xff\xff\xb2\xa7\x8e\x8e\xf1\x04\x00\x00")

func configConfigDefaultYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigDefaultYaml,
		"config/config.default.yaml",
	)
}

func configConfigDefaultYaml() (*asset, error) {
	bytes, err := configConfigDefaultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.default.yaml", size: 1265, mode: os.FileMode(420), modTime: time.Unix(1623125022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigProdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\xb1\x4a\xc5\x30\x14\x06\xe0\x3d\x4f\xf1\x83\xfb\xa5\xd7\xaa\x5c\xce\xea\xe4\xe4\x33\xe4\x36\x91\x16\xdb\xa4\xe6\xa4\xa8\x5b\x07\x17\x17\x1d\xa4\x08\x22\xe2\x50\x29\x6e\xd5\x51\x04\x9f\x26\xa9\xbe\x85\x54\x3b\x7f\x9f\xa8\x2e\xf9\xac\x24\x01\xe4\x96\x3d\x41\x6d\x57\xa7\x45\x69\xab\xc2\xa8\x55\x66\x04\x50\x5b\xe7\x09\x69\x9a\x1c\x08\xa0\x61\xed\x08\xce\x5a\x3f\x8b\x64\x3e\xb7\x4e\x11\xd6\xbb\xe9\xde\xfe\xec\x4a\x7a\xb9\x95\xac\x09\x5e\xf3\x7c\xb2\x5c\x3a\xd6\x9e\xd0\xf8\x93\x8d\x00\x2a\x79\x71\x5c\x6b\x73\x68\x8d\x61\xc2\x26\x49\xb0\x83\xf8\xd8\x86\x7e\x88\xd7\x77\xe1\xb3\xfd\xfe\x7a\x8a\x37\x2f\xb1\x1b\xff\xef\x91\x2a\xf5\x72\xd7\x7f\x77\xf1\xb7\xe7\xe9\xe1\x6a\x7a\xfd\xf8\xb9\x7f\x8f\xdd\x18\xfa\x21\x8c\xb7\xbf\x01\x00\x00\xff\xff\x5a\x98\xc6\x5e\xca\x00\x00\x00")

func configConfigProdYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigProdYaml,
		"config/config.prod.yaml",
	)
}

func configConfigProdYaml() (*asset, error) {
	bytes, err := configConfigProdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.prod.yaml", size: 202, mode: os.FileMode(420), modTime: time.Unix(1623122747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.default.yaml": configConfigDefaultYaml,
	"config/config.prod.yaml":    configConfigProdYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.default.yaml": &bintree{configConfigDefaultYaml, map[string]*bintree{}},
		"config.prod.yaml":    &bintree{configConfigProdYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
