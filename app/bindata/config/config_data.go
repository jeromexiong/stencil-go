// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package config_data generated by go-bindata.// sources:
// config/config.default.yaml
// config/config.prod.yaml
package config_data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigDefaultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\x5b\x73\xd3\xc6\x17\x7f\xd7\xa7\x38\x33\x7e\xf9\xff\x67\x1a\x4b\x4e\xb8\xa4\x7a\x6b\x03\x74\x60\xa0\x30\x6d\x98\x3e\x32\x6b\x69\x63\x6b\x90\xb5\x66\x77\xdd\x34\x7d\x92\xd3\x98\x84\xe2\xc4\x61\x72\x31\x98\x0c\xa5\x1d\x27\x50\x86\xc8\xe6\x52\x70\x7c\xc1\xdf\xa5\xd6\x4a\xf2\x53\xbe\x42\x67\xa5\x98\xa4\xd3\x97\xb5\xf7\x9c\xdf\xb9\xfc\x7e\x7b\x8e\xe6\x88\xb3\x60\xe5\x4a\x14\x71\x8b\x38\xba\x02\x70\xc9\x62\x28\x6b\xe3\x5b\x88\xe7\xe7\x08\xa5\xd8\x88\x1d\xb0\x80\x6c\x86\x21\x05\xd1\xc7\x96\xf8\xb4\x32\x5e\x5d\x0f\x76\xdb\xc2\x6b\xf8\x47\x0f\xfe\x37\xee\x3d\x8e\xbc\xa6\xa8\xbc\x1b\xd7\x0f\xff\x1f\xb4\xb6\xc5\xc1\xb2\x18\x6c\x45\xde\x70\x5c\xf7\xd4\x12\xc3\x54\xb5\x9c\x05\x02\xd2\xd6\xda\x4f\xe2\xfd\xce\xba\x38\x7c\x2c\xf6\x5e\x86\x8d\x95\xa0\xfe\x41\xb8\x4f\xa2\xd5\x57\xe2\xd7\x97\x67\x82\x44\xeb\x48\x74\xb7\xc3\xc6\x4a\x1e\x39\xa6\x8d\xa9\x02\x70\xd9\x99\x74\x76\x99\x19\xa8\x88\xcf\x74\x35\x78\xed\x1f\x3d\x48\x72\x2b\x00\x57\x2c\x8a\x6f\x60\x9e\x27\xe6\xb7\x84\x7f\x65\xdb\x64\x11\x9b\x3a\x70\x5a\x92\x58\x59\xbb\x52\x8e\xbc\x4e\x42\x22\xa8\xae\x8a\xcd\x47\xc1\xee\x51\xf0\x6e\xe7\x94\xfe\xd7\xc4\x5c\x9a\x23\x0e\x2b\x15\x8a\x92\xff\x4d\xe7\xb6\x53\x40\x94\xe5\x91\xfd\x39\x8f\x38\x58\x0e\x9e\xed\x05\x87\x4d\x71\x58\x0f\xbc\xbf\x22\xef\x53\x38\xf0\xfc\x4e\x57\xba\x8f\xfb\x55\xb1\xf6\x44\xb4\xef\x8b\xb5\xa7\xa2\xd7\xf5\x3b\xae\xdf\x79\x15\xec\xb6\xc3\xfe\x96\xb8\xff\x56\x54\xbb\x7e\x6f\xdf\xef\x6d\x44\xad\x8f\xc1\x9b\x65\xbf\xd3\xf3\xa5\x36\x3d\x51\xdb\x1d\xb9\xcb\x0a\xc0\xbc\x55\xc0\x57\x08\x2d\x20\xae\xc3\x0d\xe2\x7c\x01\x5a\x06\xae\x21\x07\xa6\x35\xed\x02\x64\xce\xeb\xda\x39\x5d\x3b\x0f\xdf\xdc\x98\x97\xd4\xe3\xba\x41\xfd\xc3\xb8\xfe\x3e\x78\xde\x17\xfd\x9a\x02\x30\x97\x47\x94\x61\xae\xc3\xed\xf9\x2b\x53\xb3\x09\x4a\xb8\xfd\xf0\xe5\x43\xd1\xad\x89\xc3\x7a\xf8\xfa\x60\xfc\xf4\xbe\xa4\x8b\xb3\xa5\xdc\x75\xfc\x23\xb6\x75\x30\xe5\x7f\x48\x25\xbf\x23\xb7\x2c\x5f\x6d\xe4\x96\x17\x11\x75\x46\x6e\x19\x53\x4a\xe8\xc8\x2d\x2f\x20\x8e\xec\x91\x5b\x36\x13\xa1\x46\xee\x72\xb8\xfd\x5b\xb0\xb6\x19\x6e\xb4\xc4\x1f\xbf\x88\x5e\x37\xf2\xbc\xcf\x5a\xc8\x58\xa9\x45\xad\xe5\xf7\xf6\xc5\x6a\x4d\xb4\x1f\x49\xf9\x87\x95\xe8\xa0\x1c\x3f\xfd\xbe\x18\xd6\x15\x80\x14\x04\x4f\xdf\x8b\x66\x63\x5c\x59\x0f\x07\x5e\xd4\xfa\x28\x6a\xcb\xe3\xc7\x95\xe3\x7e\x23\xcf\x79\x91\xe9\xaa\xca\x78\xc9\x5c\xb2\xa8\xc5\xd2\x06\x29\xa8\x26\x31\x54\x79\xb9\x44\x0c\xf5\x5f\x13\x9c\xce\xf3\x82\xad\x28\xa9\x14\xfc\xdd\x78\x7e\xdc\xa9\xf9\x43\x2f\xd8\x3e\x4a\xd2\x06\xbb\xab\x7e\xef\x83\xd8\xdc\x38\xee\x57\xc7\x7b\x6e\x74\x50\x8e\x86\x9b\xd1\xef\xd5\xe0\xc1\x96\xa8\x56\xc4\xa3\x81\xdf\x6b\xfa\x83\x61\x02\x96\xa4\x76\xd6\x64\xa2\x1c\x99\xca\x5a\x8e\x89\x38\x82\xa9\xe2\xdd\x1c\x18\x71\xbd\x3b\x89\x81\x00\x2a\x16\xd5\x13\xbf\x9a\xb8\xd4\x33\x88\x74\x8e\x9c\x04\xa8\xe9\x74\x5a\x51\x52\xc0\xb0\x41\x31\x87\xbb\x78\x89\x29\xf2\xd0\x81\x71\xec\x18\x96\x3d\x95\x23\x77\x14\x25\x25\x17\x21\xde\xab\xa4\x0f\x85\x2c\xc6\x6b\x59\x24\x94\xeb\x30\xa3\x69\x9a\x02\x70\xed\x87\x79\x39\x22\xa4\xc4\x75\xb8\x38\x1d\x9b\x16\x71\x96\x11\xe3\x2e\xe6\xb7\x08\xb1\x75\xc8\xc4\x46\x93\x14\x90\xe5\x30\x19\x0f\x30\x05\x52\x4b\x5d\x55\x6d\x62\x20\x3b\x4f\x18\xd7\x67\xb5\x59\x09\xb3\x72\x0e\xa1\xf8\xf6\x77\xd7\x3f\x23\xd5\x62\x29\x6b\x5b\xc6\xe4\xc6\xac\x9c\x73\xd5\x99\xdc\x38\x31\x09\x83\x14\x2c\x32\x45\xa1\xd8\xb4\xe2\x28\x64\x9a\x54\x87\xcc\xf4\xc5\xb4\x96\xd6\xd2\x19\xfd\xc2\xcc\xc5\x2f\x65\xdb\x88\xb1\x45\x42\x4d\x09\x31\xb3\x3a\x64\x62\x2a\xc4\xfe\xde\xfa\x19\x4f\xba\xa4\xf8\x5e\xc9\xa2\x93\x0d\x95\x1a\x05\x3b\xed\x60\xdd\x13\xdd\xad\xf0\x4d\x4f\x3c\x7b\xa8\x98\x16\xb2\xb1\xc1\x75\x28\x2c\xb1\x7b\xb6\x12\x9f\x32\x63\x4c\xe2\xb4\xe8\xa9\x4c\x33\xda\x05\x05\x40\x7e\x46\x74\xa0\x84\xf0\xb3\x9d\x40\x66\x7a\xe6\xdc\x79\xe9\x97\x0f\x94\x45\x0c\xeb\xc0\x31\x93\x18\x63\xb2\x36\x25\xbe\x30\xab\x00\x14\xd0\x4f\x37\x8b\xd8\x99\x23\x8e\xc3\x74\x98\xd5\x34\x39\xa8\x7b\xae\x68\xbe\x90\x33\xd3\x77\xa3\xe1\xb3\x60\x63\x3f\xd8\x69\x27\xd8\xab\xa6\x8d\x4f\xb0\x99\x18\x7b\xe2\x7f\xf3\x3c\x6c\xac\x84\x7f\x76\xc7\xf5\xb7\xc1\x4e\x5b\x34\x5f\x88\x76\xed\x3f\xbc\xff\x09\x00\x00\xff\xff\xf4\xf6\xe8\xfd\x89\x05\x00\x00")

func configConfigDefaultYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigDefaultYaml,
		"config/config.default.yaml",
	)
}

func configConfigDefaultYaml() (*asset, error) {
	bytes, err := configConfigDefaultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.default.yaml", size: 1417, mode: os.FileMode(420), modTime: time.Unix(1635323249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigProdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\xb1\x4a\xc5\x30\x14\x06\xe0\x3d\x4f\xf1\x83\xfb\xa5\xd7\xaa\x5c\xce\xea\xe4\xe4\x33\xe4\x36\x91\x16\xdb\xa4\xe6\xa4\xa8\x5b\x07\x17\x17\x1d\xa4\x08\x22\xe2\x50\x29\x6e\xd5\x51\x04\x9f\x26\xa9\xbe\x85\x54\x3b\x7f\x9f\xa8\x2e\xf9\xac\x24\x01\xe4\x96\x3d\x41\x6d\x57\xa7\x45\x69\xab\xc2\xa8\x55\x66\x04\x50\x5b\xe7\x09\x69\x9a\x1c\x08\xa0\x61\xed\x08\xce\x5a\x3f\x8b\x64\x3e\xb7\x4e\x11\xd6\xbb\xe9\xde\xfe\xec\x4a\x7a\xb9\x95\xac\x09\x5e\xf3\x7c\xb2\x5c\x3a\xd6\x9e\xd0\xf8\x93\x8d\x00\x2a\x79\x71\x5c\x6b\x73\x68\x8d\x61\xc2\x26\x49\xb0\x83\xf8\xd8\x86\x7e\x88\xd7\x77\xe1\xb3\xfd\xfe\x7a\x8a\x37\x2f\xb1\x1b\xff\xef\x91\x2a\xf5\x72\xd7\x7f\x77\xf1\xb7\xe7\xe9\xe1\x6a\x7a\xfd\xf8\xb9\x7f\x8f\xdd\x18\xfa\x21\x8c\xb7\xbf\x01\x00\x00\xff\xff\x5a\x98\xc6\x5e\xca\x00\x00\x00")

func configConfigProdYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigProdYaml,
		"config/config.prod.yaml",
	)
}

func configConfigProdYaml() (*asset, error) {
	bytes, err := configConfigProdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.prod.yaml", size: 202, mode: os.FileMode(420), modTime: time.Unix(1623122747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.default.yaml": configConfigDefaultYaml,
	"config/config.prod.yaml":    configConfigProdYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.default.yaml": &bintree{configConfigDefaultYaml, map[string]*bintree{}},
		"config.prod.yaml":    &bintree{configConfigProdYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
