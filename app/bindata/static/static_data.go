// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package static_data generated by go-bindata.// sources:
// public/css/index
// public/index.html
// public/js/app.js
// public/js/lib/vue
package static_data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _publicCssIndex = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x31\x8e\x02\x31\x0c\x05\xd0\x7e\x4f\xe1\x0b\x8c\xb3\x42\x54\x54\x5c\x25\xb2\x0d\x13\x0d\x89\xad\x7c\x07\xcd\xf1\x91\xe8\x68\x5f\xf3\xda\x50\x3b\x59\x00\x6a\xa0\xe1\x49\xbb\x4d\xa3\x74\x9a\xa6\x4b\x8c\x72\x37\xd2\x86\x83\x10\x55\x8c\x1e\x3e\xbf\x64\x67\xed\xf1\x32\xf0\xdf\x9e\x19\xb8\x95\xb2\x46\x1c\x4f\x16\xef\x25\x5d\xbd\xbf\x65\xab\x11\x9b\x00\xf7\x0b\xff\xf3\xb5\xfc\x44\x0b\xa6\xd4\x06\xd2\xaa\xf2\x27\x00\x00\xff\xff\x94\x83\xee\x63\x83\x00\x00\x00")

func publicCssIndexBytes() ([]byte, error) {
	return bindataRead(
		_publicCssIndex,
		"public/css/index",
	)
}

func publicCssIndex() (*asset, error) {
	bytes, err := publicCssIndexBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/index", size: 131, mode: os.FileMode(420), modTime: time.Unix(1623122747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xcd\x8e\xeb\x34\x14\xde\xf7\x29\xce\x35\x48\x17\x04\x89\x99\x2b\x16\x57\x43\x52\x8a\xe6\xb2\x60\xc1\x0e\x5d\x16\x88\x85\x6b\x9f\x34\x9e\x9e\xda\x91\xed\x64\xa6\x0c\x23\xf1\x2c\x3c\x1a\x4f\x82\x6c\xa7\x69\xd2\x29\x57\x23\x56\xb1\x7d\x7e\xbe\xf3\xf7\xd9\xa9\xde\x28\x2b\xc3\xb1\x43\x68\xc3\x81\xd6\xab\x2a\x7e\x40\x89\x20\x8a\xc6\x89\x03\x3e\x58\xb7\xaf\xd9\xd0\x23\x5b\xaf\x56\x55\x8b\x42\xad\x57\x00\xd5\x01\x83\x00\xd9\x0a\xe7\x31\xd4\xac\x0f\x4d\xf1\x9e\x25\x41\xd0\x81\x70\xfd\x93\xd3\x1e\xbe\x82\x8f\x3d\x96\xf7\x1e\xfe\xf9\xeb\x6f\xf8\xc5\x2a\xfb\xf3\xc7\xbb\x8a\x67\x85\xa8\x4a\xda\xec\xc1\x21\xd5\xcc\x87\x23\xa1\x6f\x11\x03\x83\xd6\x61\x53\xb3\x36\x84\xce\xdf\x72\xde\x9b\x6e\xbf\x2b\xa5\x3d\xf0\x60\x95\x3d\x0c\xb2\x10\x5d\x57\x48\xef\x37\xef\xca\x6f\xca\x6f\xb9\x36\x0a\x1f\x4b\xe9\x7d\x46\x7f\x53\x14\x10\x5a\xed\xc1\x20\x2a\x0f\xc1\xc2\x16\x81\xac\x50\xa8\x60\x8b\x8d\x75\x08\xbb\x5e\x2b\x7c\xeb\x41\x1b\xd2\x06\xc1\x4b\xa7\xbb\xe0\xa1\x28\x92\x83\xbc\x05\xef\xe4\x39\x86\xa1\xc7\x7b\x5f\x5a\xb7\xe3\xf7\x3e\x6e\xca\x7b\xcf\xd6\x15\xcf\xaa\x13\xec\xe7\x51\xfd\x53\x6e\xce\xa9\x88\x47\x6d\x3d\x57\xda\x87\xbc\x2c\x0f\xda\x5c\x77\xfa\x2a\x77\x4a\x3b\x94\xc1\xba\xcd\x4d\xf9\xae\x7c\xcf\xb7\xbd\x26\x35\x1d\xbe\xf4\x7b\xcd\x99\x54\x31\x00\x85\xa4\x07\x57\x1a\x0c\xdc\x74\x07\x6e\xb0\x69\xac\x2f\xef\xfd\x86\x44\x40\x1f\x72\xc4\xe3\xe9\xcb\x90\x93\xef\xd8\xc8\x88\x02\xf0\xdb\x50\x48\xb2\x62\xff\x3b\x3c\xa5\x3d\x80\xd2\xbe\x23\x71\xbc\x05\x63\x0d\x7e\x97\x0e\x9f\xa3\x11\x1f\xad\x2a\x9e\xc7\x6b\x55\x6d\xad\x3a\xe6\x58\x51\x06\x6d\x0d\x48\x12\xde\xd7\x2c\xce\x80\xe8\x3a\x96\x11\xd2\x34\xa2\x3b\x09\xf3\x6e\x94\x45\xe9\xcd\x3a\xea\xfb\x8a\xb7\x37\xd3\xa1\x36\x5d\x1f\x4e\x16\x06\x1f\x8a\xa8\xc2\x40\xf4\xc1\x36\x56\xf6\x3e\xad\xa4\x3d\x74\x84\x01\x6b\x66\x9b\x86\x41\x47\x42\x62\x6b\x49\xa1\xab\xd9\xaf\xad\x08\x8b\xe9\x52\xd6\xe0\xf7\x0c\x86\xe2\x60\x55\x9c\x65\x83\x0f\x71\xd6\xd9\x88\x08\xb0\xd9\xe3\xb1\xef\x4a\x34\x21\xda\x0b\xa5\x92\x78\x4c\x81\xe7\xa8\xc7\xdd\x45\xba\x07\xa1\x4d\xf4\xec\x5b\xfb\x90\x93\xf7\x25\xa1\xd9\x85\x36\x9e\xa6\xea\x5e\x4f\x2c\xd8\xdd\x8e\xb0\x10\x44\x0c\x22\xb7\x6b\x26\x5b\x94\xfb\xad\x7d\x9c\x05\x2a\x88\x3e\x58\x83\xe7\x82\xf5\x34\xaf\x73\x41\xda\x87\x49\x98\xe8\x0a\x43\xd1\x58\x97\xc5\xa0\x0d\x34\x9a\x02\x3a\x4c\x09\x79\x36\x37\x66\x70\xbb\xc7\x63\x5e\x97\x5a\x9d\x8b\x01\x70\x3b\xaa\x3d\xc1\xa9\xcc\xea\x16\x92\xde\xb4\xff\x1a\x50\xe9\xa0\xcd\x2e\x0b\xa0\xae\xd3\x41\x06\x82\xe7\x59\x50\x00\x95\xd2\xc3\x09\x79\xd0\xf8\xb0\x10\x8e\x2c\x9a\x52\x5e\xc2\xb0\x91\x5e\x33\xed\x2b\x55\x7c\x59\xc1\x8d\x24\x2d\xf7\x35\x3b\x39\x8a\x51\x7d\x11\x5d\x7f\x79\x09\x4e\x62\x8b\x04\x1b\xb5\xa5\xd1\x24\xa6\x31\x57\x7f\x7a\xca\xa9\xa7\x4b\x11\x9e\x9f\x2b\x9e\x4c\x2e\xdc\x6c\xfb\x10\xce\x53\xa1\xd0\x07\x67\x8f\xe7\x38\x1c\x1e\xec\xb0\x88\xa2\xe2\xd9\x64\x51\x28\xae\xf4\xb0\x38\x58\x24\x1b\x23\x3b\xa5\x1a\xf0\x31\xb0\x8b\xaa\xa5\x08\xe3\x61\x9a\x8d\xc4\x95\x71\x10\x16\xdd\x61\xb0\xd9\x52\xef\x6a\x16\x69\xf1\xa3\xd2\x61\x0c\x69\x91\xd0\x92\x11\x17\x9a\x93\xd4\xcb\x9a\x49\x61\x24\xd2\x4c\x3a\x9b\x47\x4e\x7a\x1a\x5d\xde\xd3\x89\x50\x23\x87\xc6\x6d\x63\x6d\x38\x5f\x11\x79\xf7\x5a\x4a\xf9\x4e\x2c\x6e\x9e\x42\xda\xde\x2c\x28\x11\x1b\x61\x76\xb1\x8b\x0e\x23\x59\xb5\xd9\xa5\x26\x8e\xe7\xb0\x10\xfc\x09\x1d\xf5\x4e\x90\xfe\x23\x76\x1a\x08\x9b\xf0\xc2\x13\x8f\x26\x83\xf6\x3a\x58\x17\x95\xc6\xa5\x9f\x5c\x4e\x09\xc7\xe0\xae\x30\x37\x53\xd2\x2f\x79\xbb\xe8\xba\x18\x5f\xd8\xcf\x78\xba\x1e\xce\x74\xf4\x48\x28\x13\x1b\x23\xea\x56\x93\x0e\xc7\xd8\xdc\xb7\x82\xe8\x6d\x64\xdd\x0f\x44\x15\x17\xd7\x3b\xf0\x49\x1c\x19\xf4\x80\xaf\x83\x4a\xaa\x19\x2d\x2d\xff\x17\xe0\x8c\xe1\xaf\xc0\x9c\xb4\x13\xec\xdd\x69\xf7\x9f\xc8\xe7\x61\x7b\x41\x4d\x49\x28\x5c\x31\x83\x5f\x52\xf4\xee\x2c\xb8\x36\x81\xb0\x3e\x4f\xcb\xac\x81\x77\xd1\xe9\xf9\xb2\x9c\xa2\x98\x53\xbc\xe2\x79\xb4\xd7\xab\x0b\x0a\x5c\x10\x40\x9b\x66\x7a\x7a\xba\xf5\x07\xdb\x6f\x09\x8b\x14\x63\x7c\xcd\x22\x8d\x41\xa4\x1b\xa9\xe2\x5d\xf6\x75\xf2\x7b\xf9\xe7\x10\xff\x85\x44\xd7\x5d\xfc\x03\x54\x3c\x3f\xdd\xf1\x2d\x8f\xbf\x93\xff\x06\x00\x00\xff\xff\xe1\xb7\xd3\xa3\x5e\x0a\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 2654, mode: os.FileMode(420), modTime: time.Unix(1623122747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x4b\x73\xdb\xc8\x11\xbe\xe3\x57\xb4\x99\xd4\x02\x2c\x53\x80\x9c\xdc\xc8\x30\x7b\xd0\x3a\x95\x6c\x65\xe3\x83\xb7\xf6\xe2\xf8\x30\x02\x1a\xc0\xac\x86\x33\xa8\xe9\x06\x69\xc5\xc5\xfc\xf6\xd4\x3c\xf0\xa2\x28\x59\xae\xca\x45\x02\xe6\xd1\xcf\xaf\xbf\x6e\xb0\x28\xe0\x6f\xbd\x52\x40\x1d\x96\x37\xa5\x39\x74\x4a\x0a\xcd\xf0\xab\xa9\xcc\x2f\xbf\xdd\xc1\x49\x72\x0b\xff\xb0\x92\x92\xa2\x00\xa1\x2b\x68\x05\xb5\x37\xf7\x82\xb0\x02\x6b\x7a\x96\xba\x01\xa9\xe1\xbf\x7f\xba\xbd\x05\xac\x6b\x2c\x59\x1e\x11\x94\xd4\x48\x60\x6a\xf8\x59\x1c\xc5\xc7\xd2\xca\x8e\xf3\x24\x39\x0a\x0b\x27\xda\x25\x49\x96\x09\x7a\xd4\x25\x64\x6b\xd8\xff\x15\xbe\x26\x00\xa5\xd1\xc4\x80\x47\xd4\x4c\xb0\xf7\x4b\x00\x6c\x2a\x43\xdb\xf8\x02\x40\xe2\x88\xd5\x16\xea\x5e\x97\x2c\x8d\x86\x4c\xd3\x06\x0e\xd4\xac\xc7\x13\x00\xa2\xeb\x72\x7f\x0d\xf6\x6e\x2b\xef\xf5\x41\x58\x6a\x85\xca\xd6\xf1\xcc\x79\x13\x1f\x8e\x92\x24\x1b\xfb\x0a\x81\x27\x6f\x52\xdc\xdc\x54\x82\xc5\xf6\x52\xf8\x79\x71\x21\x8a\x7e\xde\x86\x64\xf8\x7b\xde\x25\xa3\xf7\xa5\xd1\x1a\xf6\x20\x4e\x42\x32\x68\xac\x6b\x43\x79\x25\x85\xca\x56\x27\xda\x16\x85\x32\xa5\x50\xad\x21\xde\xfe\xf9\xf6\xf6\xb6\xf0\x5e\x16\x2e\x8c\xab\x4d\x0c\xdc\x7a\x97\x00\x14\xc5\x2b\xc4\x7d\x87\x3c\xef\x7c\x10\xe2\x24\xe6\xee\x0f\x96\x9c\xad\xfc\x85\xd5\x7a\x97\x9c\xd7\xd9\x7a\x9d\x97\x82\xcb\x36\x73\xaa\x8d\xc2\x1c\xad\x35\x76\xbd\x4b\x92\x31\xb8\x35\x72\xd9\x3a\x54\x51\x66\xf4\x9d\xc3\x19\x32\x86\x48\x8b\x2f\xd2\x50\xde\x20\x67\xab\x22\x4a\xcd\xb9\x45\x9d\x59\xa4\xce\x68\xc2\x01\x25\x00\xb2\x86\x71\x35\x77\x99\x80\xfd\x7e\x0f\xba\x57\x6a\x4a\x9a\x45\xee\xad\xde\xc5\x18\xfb\x7f\x93\xc6\xe5\x6d\xef\xe1\xd9\xf9\x10\xd0\xe9\xb4\x7f\x64\x63\x45\x83\x11\x85\xde\xec\x39\x46\x06\x3d\xc3\x71\x17\x9e\x4f\x9f\x83\xb6\x99\x8f\xd3\x05\xc9\x78\xa0\xc9\xba\xda\x58\xc8\xdc\x65\x09\x7b\xb8\xdd\x81\x84\xbf\x80\x3f\x92\x2b\xd4\x0d\xb7\x3b\x90\x6f\xdf\xce\x11\xe8\x95\xe4\x5d\x4f\x6d\x10\xf5\x49\x7e\x5e\xef\x96\x40\x8a\xef\xc1\xf1\x70\xc1\x3b\xe6\xa0\xee\xaa\x66\x6e\xbf\xdf\x1d\xe4\x87\xc8\x57\x58\x8b\x5e\x31\xe5\x2d\x8a\x0a\x2d\x7d\x4a\x4b\xa3\x19\x35\xdf\xf0\x63\x87\xe9\x67\xd8\xc3\x8a\xf1\x0b\x17\x9d\x12\x52\xaf\x76\xb3\xab\x9d\xa1\x29\x6b\x1b\xf8\xf9\xe3\x87\x7f\xe5\xc4\x56\xea\x46\xd6\x8f\x51\xd7\xb3\xc9\x0c\xe9\x7c\xb3\xc8\x48\x4e\x7d\x59\x22\xd1\x3c\x02\x27\xa9\x2b\x73\xca\x85\x42\xcb\xd9\x8a\xc4\xd1\x91\x4e\x2b\x2a\x10\x50\x0b\xa9\x7a\x8b\xab\x31\x22\xcb\xf4\x0f\x11\x1a\xcb\xc2\x61\x53\x99\x26\x5b\x11\xea\x6a\xeb\x83\x33\xdd\x3d\x51\x8e\x07\xc9\xd9\xea\xa3\x5b\x7e\xce\x9b\xcb\xc3\x1f\xf4\x5d\x2b\xf8\x57\x24\x7e\xf9\x4a\xc8\xd2\xd9\x41\xad\x28\x3c\xfb\xdc\x4b\x25\xf9\x11\x6a\xa9\x18\x2d\x79\x00\xc6\xe7\x08\x3e\xa1\xd4\xb3\xa9\x9b\x27\x7b\xc8\xb5\xf0\xec\xfb\xaa\x2b\x79\xd0\x94\x2d\x8f\x5e\x16\x11\xbc\x71\xab\x79\x19\x8b\xa7\x8a\x8e\x0c\xfa\xc6\xf5\xff\xa7\xca\x67\x35\xc6\xc8\x89\xae\x83\xdf\x7a\x04\xa9\x89\x85\x2e\xd1\xc7\xcd\x2d\xee\x41\xe3\xc9\x6d\x65\x5f\x03\x0f\xba\x45\xa9\x25\x4b\xa1\x80\x58\x30\x26\x00\x81\xbd\x17\xfd\x65\x56\xf4\xb9\xaf\xe0\x6c\x1d\x7a\x84\xc6\x93\x2b\xe6\x2d\xa4\x69\x58\xc0\x4a\x32\x56\x61\xcd\x71\x4e\x58\x3d\xd1\xfc\x6d\x6c\x2b\xcb\xa5\x90\xeb\x2d\xa4\x42\xa9\x34\xc4\x2f\x18\x79\x42\x38\x49\xa5\x40\x1b\x86\x9e\x10\xb8\x45\x58\x9d\x1c\x99\xae\x40\x10\x48\x86\x93\xb1\x0f\x14\x1a\xb1\xdb\xac\x25\xaa\x8a\x40\xc9\x07\x84\x55\x2b\xe8\xae\x15\xba\x41\x5a\x45\x9f\x75\x05\xa5\x50\xea\x5e\x94\x0f\x04\x6c\xe0\x20\x1e\xd0\x49\x61\xdb\x23\xdc\xf7\x0c\x0a\x39\x25\x78\x40\xec\x80\x5b\xa9\x1b\x82\x23\xda\x47\x20\xe9\x22\x1e\x54\xa6\x04\xbf\xf7\xc4\x20\x80\x0e\x42\x29\x68\x90\x7d\xa3\x27\x16\x96\xb1\xca\x83\x2a\x67\xbc\xb3\x33\xd2\x60\xe9\xed\xf0\xfc\xd6\xa1\x25\x49\x8c\x2e\x3b\x30\x9e\x0b\x61\x2f\x8a\x65\x67\xf7\xef\x00\xad\xd0\x95\x42\xfb\x0c\x90\xe2\xa1\x40\x18\xae\xc3\x4e\x7e\x5f\x1c\x80\x45\x3a\x5d\x7d\x47\x39\xbb\xe5\xa9\xa5\x10\xd8\x43\x2d\x14\xe1\xe2\xd0\x39\x99\xde\x3c\xdc\xe3\x73\x85\xd8\x6d\x7d\x3c\x87\xb5\x73\x78\x18\x73\xea\xd0\xdb\x33\x56\xd0\x59\xd3\xa1\x65\x89\x14\x36\x5a\xe6\x6e\x5b\x14\xc7\x1e\x7f\xa7\xdc\xd8\xa6\x68\x7a\x59\x61\x31\x9c\xcf\x5b\x3e\xa8\x58\x57\xbd\x2f\xab\x00\xd4\x50\x38\x01\x79\x74\xad\x19\x8d\xc5\x13\xf9\xe3\x13\xb7\x92\xf2\x09\x77\x9f\x33\xbf\x10\x22\x91\xcc\xc6\x20\x8b\x07\x21\xb5\xd4\xcd\x6b\xa4\xe6\x81\x5f\xe6\xb2\x62\xd3\x9a\x8b\x14\x4a\xfd\x64\x34\x4e\x73\x5b\x83\x7c\x5d\xfa\x54\xf2\x4e\xe0\x68\x8a\x6f\xe9\xb7\x97\xe3\x1a\x2d\xa5\x1c\x85\xea\x71\xd1\x26\x47\xa3\xf2\xda\xd8\xf7\xa2\x6c\x9f\x25\x9a\x01\x25\x13\xcb\xc0\x1e\xbc\xc0\xf1\xc0\x79\xbd\x14\xac\x0d\xcb\xfa\x31\xa0\x25\xbb\x6c\xbf\x63\x39\xc7\x38\x0d\xae\x77\xaa\xb7\x42\xc9\xff\x2c\x18\x59\x3f\x89\xae\xf6\x0e\xbf\x83\x1f\x21\x75\x0d\x3e\x85\x6d\x78\xa0\xf4\x42\x7c\x51\xc0\x01\xb9\x35\x15\x01\xb7\x82\xc1\x57\xec\x01\x35\x7b\x56\x03\x65\x1a\x59\xc6\xda\xd4\x86\x3d\x95\x58\x4c\x09\xb4\x81\x9f\x3e\xfc\x02\x07\xa1\x65\xd7\x2b\xe1\xed\x70\x5b\x20\xd8\x65\xcb\x5d\x89\x72\x07\xcb\xe7\xee\x5e\xcf\xdd\xd3\x2a\xbb\x0e\x30\x51\x45\xbe\xbc\x26\xc4\x31\xb7\x8f\x3b\xec\x63\x98\x03\xe3\xc2\x0f\x3f\x2c\xde\x73\xb6\xf2\x30\x4e\xcf\x7e\x68\x78\x92\xff\x10\xcc\x8b\xae\x3f\x03\x85\x1f\xa0\xa6\xe3\xb2\xda\xce\x77\x03\x8c\xe1\x2d\xbc\xdb\xb8\xf0\x79\xf6\x73\x4c\xe6\x08\xb7\x54\xd2\xcd\x42\x24\x2b\xcc\x27\x54\x48\x56\xb8\x0d\xd6\x6f\xc6\xd5\x79\x43\x74\x7c\x92\x5c\xa0\x69\xe1\xe4\x1e\xd2\x34\xf9\x06\xc6\x42\xe2\x27\xc1\x97\xb1\x5c\x02\xdb\x45\x66\x09\xec\xcb\x41\x72\x01\xf9\x91\xf2\xbc\x26\x40\x45\xf8\xd2\x71\xc7\x78\x97\x63\xd5\x4b\x86\x47\x7e\x31\xc7\x6f\x58\x3d\x4b\x03\x75\x4a\x96\x73\x2c\xe5\x52\x57\xf8\xe5\x43\x1d\xae\x6c\xe0\xdd\xfa\xb5\x11\x73\xbd\xfa\x15\x7a\xef\xb1\x36\x16\xdf\x57\x92\xef\x44\xd9\x7a\x20\x7a\xc0\xb9\xf4\xce\xcf\x4d\xad\x3f\x1e\x59\x28\xab\x8c\xf6\x32\x5e\x4e\xcd\x9b\x0b\x49\xaf\x83\xef\x42\xb3\x1b\x2a\x66\x15\x18\xec\x5c\x18\x1d\x6b\x65\xb7\xd0\x3b\xee\x3e\x61\xcc\x29\x41\xc1\xe0\xef\x49\x70\x40\xa6\x9b\xc1\xd4\xcb\xce\x7f\x87\x1f\x57\x72\xb2\x50\x17\xec\xbd\xbb\x36\x78\x5e\x43\x94\x43\xf9\xb3\xcd\x6b\xf7\x4d\x1f\xe7\xd4\x2b\xa0\xec\x89\xcd\x01\x2a\x69\xe3\xcf\x1c\x6c\xc0\x7f\x18\x0f\x4c\xe1\x58\x96\x0d\xdc\x23\xf4\x5d\x25\xc2\xf4\x5a\x14\x10\xfc\x81\xda\x94\x3d\xb9\xfe\x66\xb4\x3f\x2d\x75\xd7\x73\x18\xe7\xf2\x97\xc7\x03\xaf\xf7\x66\xd4\x3b\x8c\x09\xe3\xc2\xc8\xdb\xa9\x73\xec\xc6\x2b\x4a\xe7\xa1\x41\xb5\x81\x7b\xa9\x2b\xa9\x9b\x25\x24\xe3\x62\xfe\x84\x4e\x51\xe5\x5e\xcc\xb5\xdf\x2c\x92\xf3\xda\x4f\xe2\x61\x66\x1b\x7e\x06\x9a\x3e\xf5\x8d\xfe\xbb\xa0\x76\x08\xa5\x17\xea\x99\x7e\xfa\xe4\xd9\x0f\xdf\x74\xca\x94\xbe\x1f\xb9\x59\xac\xcd\x2d\x76\x4a\x94\x98\x15\x7f\xf8\x77\xf1\x63\xb1\x81\x34\x75\xda\x9d\x9d\xc3\x5c\x33\x1b\x69\xc6\x6f\xd8\xf8\x83\xcb\x28\x7a\x7a\x49\x2e\x68\xed\x9a\xd2\x89\x86\x9f\x08\x1a\x67\x75\xf7\xe5\x31\x7c\x84\x56\xd5\xfb\x23\x6a\xfe\xa7\x9f\x6f\xd1\x66\xa9\x13\x12\x66\xdf\x74\xb3\x70\x7d\x9d\x2c\x03\xe1\x63\x76\x30\xbd\xe6\xc4\xa9\xfa\xa3\x7f\xcc\x52\x0f\x46\xd1\x75\xe9\x7a\xf7\xbf\x00\x00\x00\xff\xff\x4d\x34\xa6\x8a\x8c\x13\x00\x00")

func publicJsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsAppJs,
		"public/js/app.js",
	)
}

func publicJsAppJs() (*asset, error) {
	bytes, err := publicJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/app.js", size: 5004, mode: os.FileMode(420), modTime: time.Unix(1623137795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsLibVue = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x41\x0e\x02\x21\x10\x44\xd1\xbd\xa7\xa8\x13\xc0\xde\x1b\x78\x0c\x32\x94\x02\xea\x40\xba\xba\x27\x1e\xdf\x44\x17\xb3\xfd\xf9\x79\x47\x30\x0d\xa1\x0b\xfb\x74\x34\x1a\xe1\x13\xc6\x1a\x1b\xe1\x8d\xa8\x5d\x4f\x68\x95\x8d\xb8\x4f\xfb\x25\x7e\xca\x7b\xbd\xa8\x74\xb9\xed\x72\x96\x8a\xe6\xbe\x74\xcd\xf9\x08\x0e\xa5\x69\x8f\x3c\x94\x4f\x3a\xc4\x8a\xfe\x7f\xd3\x37\x00\x00\xff\xff\x96\x3d\x12\xa7\x72\x00\x00\x00")

func publicJsLibVueBytes() ([]byte, error) {
	return bindataRead(
		_publicJsLibVue,
		"public/js/lib/vue",
	)
}

func publicJsLibVue() (*asset, error) {
	bytes, err := publicJsLibVueBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/lib/vue", size: 114, mode: os.FileMode(420), modTime: time.Unix(1623122747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/css/index":  publicCssIndex,
	"public/index.html": publicIndexHtml,
	"public/js/app.js":  publicJsAppJs,
	"public/js/lib/vue": publicJsLibVue,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"index": &bintree{publicCssIndex, map[string]*bintree{}},
		}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{publicJsAppJs, map[string]*bintree{}},
			"lib": &bintree{nil, map[string]*bintree{
				"vue": &bintree{publicJsLibVue, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
